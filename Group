package lesson.three.ht;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;

public class Group {
	private String groupName;
	private List<Student> students;

	public Group(String groupName, Student[] studens) {
		super();
		this.groupName = groupName;

	}

	public Group() {
		super();
		// TODO Auto-generated constructor stub
	}

	public String getGroupName() {
		return groupName;
	}

	public void setGroupName(String groupName) {
		this.groupName = groupName;
	}

	public List<Student> getStudens() {
		return students;
	}

	public void setStudens(List<Student> studens) {
		this.students = studens;
	}

//	public void addStudent(Student student) throws GroupOverflowException {
//		for (int i = 0; i < this.students.length; i++) {
//			if (this.students[i] != null && i == this.students.length - 1) {
//				throw new GroupOverflowException("Student " + student.getName() + " " + student.getLastName()
//						+ " can't be added to the group " + this.groupName + ". Group is full!");
//			} else if (this.students[i] == null) {
//				student.setGroupName(this.groupName);
//				this.students[i] = student;
//				System.out.println("Student " + student.getName() + " " + student.getLastName() + " is added to group "
//						+ this.groupName);
//				break;
//			}
//		}
//	}

	public Student searchStudentByLastName(String lastName) throws StudentNotFoundException {
		Student foundStudent = null;
		for (Student student : this.students) {
			if (student != null && student.getLastName().equals(lastName)) {
				System.out.println("Student with last name " + lastName + "is found in group " + this.groupName + ": "
						+ student.toString());
				foundStudent = student;
			}
		}
		if (foundStudent == null) {
			throw new StudentNotFoundException(
					"Student with last name " + lastName + " is not found in group " + this.groupName);
		}
		return foundStudent;
	}

//		for (int i = 0; i < this.students.length; i++) {
//			if (this.students[i] != null && this.students[i].getLastName().equals(lastName)) {
//				System.out.println("Student with last name " + lastName + " is found in group " + this.groupName + ": "
//						+ this.students[i].toString());
//				foundStudent = this.students[i];
//			}
//		}
//		if (foundStudent == null) {
//			throw new StudentNotFoundException(
//					"Student with last name " + lastName + " is not found in group " + this.groupName);
//		}
//		return foundStudent;
//
//	}

//	public boolean removeStudentByID(int id) {
//		for (int i = 0; i < this.students.length; i++) {
//			if (this.students[i] != null && this.students[i].getId() == id) {
//				this.students[i] = null;
//				System.out.println("Student with student card id " + id + " is removed from group " + this.groupName);
//				return true;
//			}
//		}
//
//		return false;
//
//	}

//	public void SortStudentsByLastName() {
//		Arrays.sort(students, Comparator.nullsFirst(new SortStudentsByLastName()));
//		for (int i = 0; i < students.length ; i++) {
//			System.out.println();
//	}
//
//				
//}

	public boolean equalStudents(Student student) {
		for (Student checkStudent : this.students) {
			if (student.equals(checkStudent)) {
				return true;
			}
		}
		return false;
	}

	@Override
	public int hashCode() {
		return Objects.hash(groupName, students);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Group other = (Group) obj;
		return Objects.equals(groupName, other.groupName) && Objects.equals(students, other.students);
	}

}
